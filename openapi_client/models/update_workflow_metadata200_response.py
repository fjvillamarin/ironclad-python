# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.list_all_workflow_approvals200_response_roles_inner import ListAllWorkflowApprovals200ResponseRolesInner
from openapi_client.models.update_workflow_metadata200_response_approvals import UpdateWorkflowMetadata200ResponseApprovals
from openapi_client.models.update_workflow_metadata200_response_attributes import UpdateWorkflowMetadata200ResponseAttributes
from openapi_client.models.update_workflow_metadata200_response_creator import UpdateWorkflowMetadata200ResponseCreator
from openapi_client.models.update_workflow_metadata200_response_schema import UpdateWorkflowMetadata200ResponseSchema
from openapi_client.models.update_workflow_metadata200_response_signatures import UpdateWorkflowMetadata200ResponseSignatures
from typing import Optional, Set
from typing_extensions import Self

class UpdateWorkflowMetadata200Response(BaseModel):
    """
    UpdateWorkflowMetadata200Response
    """ # noqa: E501
    id: Optional[StrictStr] = None
    ironclad_id: Optional[StrictStr] = Field(default=None, alias="ironcladId")
    title: Optional[StrictStr] = None
    template: Optional[StrictStr] = None
    step: Optional[StrictStr] = None
    var_schema: Optional[UpdateWorkflowMetadata200ResponseSchema] = Field(default=None, alias="schema")
    attributes: Optional[UpdateWorkflowMetadata200ResponseAttributes] = None
    is_cancelled: Optional[StrictBool] = Field(default=True, alias="isCancelled")
    is_complete: Optional[StrictBool] = Field(default=True, alias="isComplete")
    status: Optional[StrictStr] = None
    creator: Optional[UpdateWorkflowMetadata200ResponseCreator] = None
    created: Optional[StrictStr] = None
    last_updated: Optional[StrictStr] = Field(default=None, alias="lastUpdated")
    roles: Optional[List[ListAllWorkflowApprovals200ResponseRolesInner]] = None
    approvals: Optional[UpdateWorkflowMetadata200ResponseApprovals] = None
    signatures: Optional[UpdateWorkflowMetadata200ResponseSignatures] = None
    record_ids: Optional[List[StrictStr]] = Field(default=None, alias="recordIds")
    is_revertible_to_review: Optional[StrictBool] = Field(default=None, alias="isRevertibleToReview")
    __properties: ClassVar[List[str]] = ["id", "ironcladId", "title", "template", "step", "schema", "attributes", "isCancelled", "isComplete", "status", "creator", "created", "lastUpdated", "roles", "approvals", "signatures", "recordIds", "isRevertibleToReview"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateWorkflowMetadata200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        # override the default output from pydantic by calling `to_dict()` of approvals
        if self.approvals:
            _dict['approvals'] = self.approvals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signatures
        if self.signatures:
            _dict['signatures'] = self.signatures.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateWorkflowMetadata200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ironcladId": obj.get("ironcladId"),
            "title": obj.get("title"),
            "template": obj.get("template"),
            "step": obj.get("step"),
            "schema": UpdateWorkflowMetadata200ResponseSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "attributes": UpdateWorkflowMetadata200ResponseAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "isCancelled": obj.get("isCancelled") if obj.get("isCancelled") is not None else True,
            "isComplete": obj.get("isComplete") if obj.get("isComplete") is not None else True,
            "status": obj.get("status"),
            "creator": UpdateWorkflowMetadata200ResponseCreator.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "created": obj.get("created"),
            "lastUpdated": obj.get("lastUpdated"),
            "roles": [ListAllWorkflowApprovals200ResponseRolesInner.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "approvals": UpdateWorkflowMetadata200ResponseApprovals.from_dict(obj["approvals"]) if obj.get("approvals") is not None else None,
            "signatures": UpdateWorkflowMetadata200ResponseSignatures.from_dict(obj["signatures"]) if obj.get("signatures") is not None else None,
            "recordIds": obj.get("recordIds"),
            "isRevertibleToReview": obj.get("isRevertibleToReview")
        })
        return _obj


