# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_a_record_request_parent import CreateARecordRequestParent
from openapi_client.models.record_property_link_model import RecordPropertyLinkModel
from openapi_client.models.update_record_metadata_request_add_properties import UpdateRecordMetadataRequestAddProperties
from typing import Optional, Set
from typing_extensions import Self

class UpdateRecordMetadataRequest(BaseModel):
    """
    UpdateRecordMetadataRequest
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="The type of Record.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the Record.")
    add_properties: Optional[UpdateRecordMetadataRequestAddProperties] = Field(default=None, alias="addProperties")
    remove_properties: Optional[List[StrictStr]] = Field(default=None, description="List of record property ids to be removed (e.g., ['counterpartyAddress', 'agreementExpirationDate'])", alias="removeProperties")
    add_links: Optional[List[RecordPropertyLinkModel]] = Field(default=None, description="List of objects containing the Record IDs or Ironclad IDs of the records to link. For an explanation of Record IDs or Ironclad IDs and how to find them, see [Getting Started](https://developer.ironcladapp.com/reference/getting-started-api).", alias="addLinks")
    remove_links: Optional[List[RecordPropertyLinkModel]] = Field(default=None, description="List of objects containing the Record IDs or Ironclad IDs of the record links to remove. For an explanation of Record IDs or Ironclad IDs and how to find them, see [Getting Started](https://developer.ironcladapp.com/reference/getting-started-api).", alias="removeLinks")
    set_parent: Optional[CreateARecordRequestParent] = Field(default=None, alias="setParent")
    add_children: Optional[List[RecordPropertyLinkModel]] = Field(default=None, description="List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.", alias="addChildren")
    remove_parent: Optional[StrictBool] = Field(default=None, description="Boolean flag to indicate if the parent id should be removed for the current record.", alias="removeParent")
    remove_children: Optional[List[RecordPropertyLinkModel]] = Field(default=None, description="List of objects containing the Record IDs or Ironclad IDs of the child records to be removed from the current record.", alias="removeChildren")
    __properties: ClassVar[List[str]] = ["type", "name", "addProperties", "removeProperties", "addLinks", "removeLinks", "setParent", "addChildren", "removeParent", "removeChildren"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateRecordMetadataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_properties
        if self.add_properties:
            _dict['addProperties'] = self.add_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in add_links (list)
        _items = []
        if self.add_links:
            for _item_add_links in self.add_links:
                if _item_add_links:
                    _items.append(_item_add_links.to_dict())
            _dict['addLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remove_links (list)
        _items = []
        if self.remove_links:
            for _item_remove_links in self.remove_links:
                if _item_remove_links:
                    _items.append(_item_remove_links.to_dict())
            _dict['removeLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of set_parent
        if self.set_parent:
            _dict['setParent'] = self.set_parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in add_children (list)
        _items = []
        if self.add_children:
            for _item_add_children in self.add_children:
                if _item_add_children:
                    _items.append(_item_add_children.to_dict())
            _dict['addChildren'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remove_children (list)
        _items = []
        if self.remove_children:
            for _item_remove_children in self.remove_children:
                if _item_remove_children:
                    _items.append(_item_remove_children.to_dict())
            _dict['removeChildren'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateRecordMetadataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "addProperties": UpdateRecordMetadataRequestAddProperties.from_dict(obj["addProperties"]) if obj.get("addProperties") is not None else None,
            "removeProperties": obj.get("removeProperties"),
            "addLinks": [RecordPropertyLinkModel.from_dict(_item) for _item in obj["addLinks"]] if obj.get("addLinks") is not None else None,
            "removeLinks": [RecordPropertyLinkModel.from_dict(_item) for _item in obj["removeLinks"]] if obj.get("removeLinks") is not None else None,
            "setParent": CreateARecordRequestParent.from_dict(obj["setParent"]) if obj.get("setParent") is not None else None,
            "addChildren": [RecordPropertyLinkModel.from_dict(_item) for _item in obj["addChildren"]] if obj.get("addChildren") is not None else None,
            "removeParent": obj.get("removeParent"),
            "removeChildren": [RecordPropertyLinkModel.from_dict(_item) for _item in obj["removeChildren"]] if obj.get("removeChildren") is not None else None
        })
        return _obj


