# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from ironclad_python.models.workflow_async_in_progress_response import WorkflowAsyncInProgressResponse
from ironclad_python.models.workflow_async_launch_failed_response import WorkflowAsyncLaunchFailedResponse
from ironclad_python.models.workflow_async_launch_success_response import WorkflowAsyncLaunchSuccessResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WORKFLOWLAUNCHSTATUS_ONE_OF_SCHEMAS = ["WorkflowAsyncInProgressResponse", "WorkflowAsyncLaunchFailedResponse", "WorkflowAsyncLaunchSuccessResponse"]

class WorkflowLaunchStatus(BaseModel):
    """
    The current status of the launch workflow job.
    """
    # data type: WorkflowAsyncLaunchSuccessResponse
    oneof_schema_1_validator: Optional[WorkflowAsyncLaunchSuccessResponse] = None
    # data type: WorkflowAsyncLaunchFailedResponse
    oneof_schema_2_validator: Optional[WorkflowAsyncLaunchFailedResponse] = None
    # data type: WorkflowAsyncInProgressResponse
    oneof_schema_3_validator: Optional[WorkflowAsyncInProgressResponse] = None
    actual_instance: Optional[Union[WorkflowAsyncInProgressResponse, WorkflowAsyncLaunchFailedResponse, WorkflowAsyncLaunchSuccessResponse]] = None
    one_of_schemas: Set[str] = { "WorkflowAsyncInProgressResponse", "WorkflowAsyncLaunchFailedResponse", "WorkflowAsyncLaunchSuccessResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WorkflowLaunchStatus.model_construct()
        error_messages = []
        match = 0
        # validate data type: WorkflowAsyncLaunchSuccessResponse
        if not isinstance(v, WorkflowAsyncLaunchSuccessResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WorkflowAsyncLaunchSuccessResponse`")
        else:
            match += 1
        # validate data type: WorkflowAsyncLaunchFailedResponse
        if not isinstance(v, WorkflowAsyncLaunchFailedResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WorkflowAsyncLaunchFailedResponse`")
        else:
            match += 1
        # validate data type: WorkflowAsyncInProgressResponse
        if not isinstance(v, WorkflowAsyncInProgressResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WorkflowAsyncInProgressResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WorkflowLaunchStatus with oneOf schemas: WorkflowAsyncInProgressResponse, WorkflowAsyncLaunchFailedResponse, WorkflowAsyncLaunchSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WorkflowLaunchStatus with oneOf schemas: WorkflowAsyncInProgressResponse, WorkflowAsyncLaunchFailedResponse, WorkflowAsyncLaunchSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into WorkflowAsyncLaunchSuccessResponse
        try:
            instance.actual_instance = WorkflowAsyncLaunchSuccessResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WorkflowAsyncLaunchFailedResponse
        try:
            instance.actual_instance = WorkflowAsyncLaunchFailedResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WorkflowAsyncInProgressResponse
        try:
            instance.actual_instance = WorkflowAsyncInProgressResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WorkflowLaunchStatus with oneOf schemas: WorkflowAsyncInProgressResponse, WorkflowAsyncLaunchFailedResponse, WorkflowAsyncLaunchSuccessResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WorkflowLaunchStatus with oneOf schemas: WorkflowAsyncInProgressResponse, WorkflowAsyncLaunchFailedResponse, WorkflowAsyncLaunchSuccessResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], WorkflowAsyncInProgressResponse, WorkflowAsyncLaunchFailedResponse, WorkflowAsyncLaunchSuccessResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


