# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_author_model import ActivityAuthorModel
from openapi_client.models.outbound_attachment_model import OutboundAttachmentModel
from openapi_client.models.outbound_email_response_email_opened_timestamps_inner import OutboundEmailResponseEmailOpenedTimestampsInner
from typing import Optional, Set
from typing_extensions import Self

class OutboundEmailResponse(BaseModel):
    """
    OutboundEmailResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    author: Optional[ActivityAuthorModel] = None
    timestamp: Optional[StrictStr] = None
    subject: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    recipients: Optional[List[StrictStr]] = None
    cc: Optional[List[StrictStr]] = None
    attachments: Optional[List[OutboundAttachmentModel]] = None
    email_opened_timestamps: Optional[List[OutboundEmailResponseEmailOpenedTimestampsInner]] = Field(default=None, alias="emailOpenedTimestamps")
    __properties: ClassVar[List[str]] = ["id", "type", "author", "timestamp", "subject", "body", "recipients", "cc", "attachments", "emailOpenedTimestamps"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['outboundEmail']):
            raise ValueError("must be one of enum values ('outboundEmail')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutboundEmailResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in email_opened_timestamps (list)
        _items = []
        if self.email_opened_timestamps:
            for _item_email_opened_timestamps in self.email_opened_timestamps:
                if _item_email_opened_timestamps:
                    _items.append(_item_email_opened_timestamps.to_dict())
            _dict['emailOpenedTimestamps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutboundEmailResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "author": ActivityAuthorModel.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "timestamp": obj.get("timestamp"),
            "subject": obj.get("subject"),
            "body": obj.get("body"),
            "recipients": obj.get("recipients"),
            "cc": obj.get("cc"),
            "attachments": [OutboundAttachmentModel.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "emailOpenedTimestamps": [OutboundEmailResponseEmailOpenedTimestampsInner.from_dict(_item) for _item in obj["emailOpenedTimestamps"]] if obj.get("emailOpenedTimestamps") is not None else None
        })
        return _obj


