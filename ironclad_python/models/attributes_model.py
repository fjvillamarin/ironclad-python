# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from ironclad_python.models.attributes_model_draft_inner import AttributesModelDraftInner
from typing import Optional, Set
from typing_extensions import Self

class AttributesModel(BaseModel):
    """
    The data that will be used to populate the workflow's fields. Learn more about the various attributes and their associated types by viewing the [Launch a Workflow](https://developer.ironcladapp.com/docs/launch-a-workflow) guide. Your attributes will differ and include more than this simple example.
    """ # noqa: E501
    counterparty_name: StrictStr = Field(alias="counterpartyName")
    draft: Optional[List[AttributesModelDraftInner]] = Field(default=None, description="Provide a URL for a file representing the first uploaded version of a counterparty paper. This field is required when the template source is set to third party paper")
    paper_source: Optional[StrictStr] = Field(default=None, description="Indicate the type of paper source used on a contract that supports both templatized and third party paper functionality. This field is required when there exists a question for selecting paper source on the template", alias="paperSource")
    __properties: ClassVar[List[str]] = ["counterpartyName", "draft", "paperSource"]

    @field_validator('paper_source')
    def paper_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Counterparty paper', 'Our paper']):
            raise ValueError("must be one of enum values ('Counterparty paper', 'Our paper')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttributesModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in draft (list)
        _items = []
        if self.draft:
            for _item_draft in self.draft:
                if _item_draft:
                    _items.append(_item_draft.to_dict())
            _dict['draft'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttributesModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counterpartyName": obj.get("counterpartyName"),
            "draft": [AttributesModelDraftInner.from_dict(_item) for _item in obj["draft"]] if obj.get("draft") is not None else None,
            "paperSource": obj.get("paperSource")
        })
        return _obj


