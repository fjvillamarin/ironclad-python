# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ironclad_python.models.create_a_record_request_parent import CreateARecordRequestParent
from ironclad_python.models.create_a_record_request_properties import CreateARecordRequestProperties
from ironclad_python.models.record_property_link_model import RecordPropertyLinkModel
from typing import Optional, Set
from typing_extensions import Self

class CreateARecordRequest(BaseModel):
    """
    CreateARecordRequest
    """ # noqa: E501
    type: StrictStr = Field(description="The type of record to be created. You can view available record types by retrieving records metadata.")
    name: StrictStr = Field(description="The name of the record.")
    properties: CreateARecordRequestProperties
    links: Optional[List[RecordPropertyLinkModel]] = None
    parent: Optional[CreateARecordRequestParent] = None
    children: Optional[List[RecordPropertyLinkModel]] = Field(default=None, description="List of objects containing the Record IDs or Ironclad IDs of the records to be set as child records of the current record.")
    __properties: ClassVar[List[str]] = ["type", "name", "properties", "links", "parent", "children"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateARecordRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateARecordRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "name": obj.get("name"),
            "properties": CreateARecordRequestProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "links": [RecordPropertyLinkModel.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "parent": CreateARecordRequestParent.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "children": [RecordPropertyLinkModel.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None
        })
        return _obj


