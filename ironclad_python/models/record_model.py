# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ironclad_python.models.record_model_attachments import RecordModelAttachments
from ironclad_python.models.record_model_links_inner import RecordModelLinksInner
from ironclad_python.models.record_model_properties import RecordModelProperties
from ironclad_python.models.record_model_source import RecordModelSource
from typing import Optional, Set
from typing_extensions import Self

class RecordModel(BaseModel):
    """
    RecordModel
    """ # noqa: E501
    id: Optional[StrictStr] = None
    ironclad_id: Optional[StrictStr] = Field(default=None, alias="ironcladId")
    type: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    last_updated: Optional[StrictStr] = Field(default=None, alias="lastUpdated")
    properties: Optional[RecordModelProperties] = None
    attachments: Optional[RecordModelAttachments] = None
    links: Optional[List[RecordModelLinksInner]] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    child_ids: Optional[List[StrictStr]] = Field(default=None, alias="childIds")
    source: Optional[RecordModelSource] = None
    __properties: ClassVar[List[str]] = ["id", "ironcladId", "type", "name", "lastUpdated", "properties", "attachments", "links", "parentId", "childIds", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecordModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attachments
        if self.attachments:
            _dict['attachments'] = self.attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecordModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ironcladId": obj.get("ironcladId"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "lastUpdated": obj.get("lastUpdated"),
            "properties": RecordModelProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "attachments": RecordModelAttachments.from_dict(obj["attachments"]) if obj.get("attachments") is not None else None,
            "links": [RecordModelLinksInner.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "parentId": obj.get("parentId"),
            "childIds": obj.get("childIds"),
            "source": RecordModelSource.from_dict(obj["source"]) if obj.get("source") is not None else None
        })
        return _obj


