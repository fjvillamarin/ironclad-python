# coding: utf-8

"""
    Ironclad Public API

    Documentation for Ironclad's REST API.

    The version of the OpenAPI document: 1
    Contact: support@ironcladapp.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.webhook_invalid_event_type_bad_request_response import WebhookInvalidEventTypeBadRequestResponse

class TestWebhookInvalidEventTypeBadRequestResponse(unittest.TestCase):
    """WebhookInvalidEventTypeBadRequestResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WebhookInvalidEventTypeBadRequestResponse:
        """Test WebhookInvalidEventTypeBadRequestResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WebhookInvalidEventTypeBadRequestResponse`
        """
        model = WebhookInvalidEventTypeBadRequestResponse()
        if include_optional:
            return WebhookInvalidEventTypeBadRequestResponse(
                code = 'INVALID_PARAM',
                message = 'invalid event type; *, workflow_launched, workflow_updated, workflow_cancelled, workflow_completed, workflow_approval_status_changed, workflow_attribute_updated, workflow_changed_turn, workflow_comment_reaction_added, workflow_comment_reaction_removed, workflow_comment_added, workflow_comment_removed, workflow_comment_updated, workflow_counterparty_invite_sent, workflow_counterparty_invite_revoked, workflow_documents_added, workflow_documents_removed, workflow_documents_updated, workflow_documents_renamed, workflow_document_edited, workflow_paused, workflow_resumed, workflow_signature_packet_sent, workflow_signature_packet_uploaded, or workflow_signature_packet_cancelled, workflow_signer_added, workflow_signer_removed, workflow_signer_reassigned are acceptable event types',
                param = 'events'
            )
        else:
            return WebhookInvalidEventTypeBadRequestResponse(
        )
        """

    def testWebhookInvalidEventTypeBadRequestResponse(self):
        """Test WebhookInvalidEventTypeBadRequestResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
